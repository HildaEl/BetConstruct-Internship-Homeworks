// Constructor overloading
function Range(from, to) {
    if(arguments[0] instanceof Array) {
        this.from = arguments[0][0];
        this.to = arguments[0][1];
    }
    else if((arguments[0] instanceof Object) && ('to'in arguments[0]) && ('from' in arguments[0])) {
        this.from = arguments[0].from;
        this.to = arguments[0].to;
    }
    else{
        this.from = from || 0;
        this.to = to || 0;
    }
}

Range.includes = function(from, to, num) {
    return (from <= num) && (to >= num);
}

Range.prototype.includes = function(num) {
    return Range.includes(this.from, this.to, num);
}

// define equality of two ranges as the equality of their right endpoints
Range.compare = function(from1, from2) {
    return from1-from2;
}

Range.prototype.compareTo = function(from){
    return Range.compare(this.from, from);
}

Range.equal = function(from1, from2) {
        return Range.compare(from1, from2) == 0;
}

Range.prototype.equals = function(from) {
        return Range.compare(this.from, from) == 0;
}

Range.gte = function(from1, from2) {
    return Range.compare(from1, from2) >= 0;
}

Range.prototype.gte = function(from) {
    return Range.compare(this.from, from) >= 0;
}
// analogously can be constructed <=, <, >
